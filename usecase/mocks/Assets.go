// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/javiertlopez/awesome/model"
	mock "github.com/stretchr/testify/mock"
)

// Assets is an autogenerated mock type for the Assets type
type Assets struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, source, public
func (_m *Assets) Create(ctx context.Context, source string, public bool) (model.Asset, error) {
	ret := _m.Called(ctx, source, public)

	var r0 model.Asset
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) model.Asset); ok {
		r0 = rf(ctx, source, public)
	} else {
		r0 = ret.Get(0).(model.Asset)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, source, public)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *Assets) GetByID(ctx context.Context, id string) (model.Asset, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Asset
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Asset); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Asset)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAssets interface {
	mock.TestingT
	Cleanup(func())
}

// NewAssets creates a new instance of Assets. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAssets(t mockConstructorTestingTNewAssets) *Assets {
	mock := &Assets{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
